week7.day2:

Today's Agenda:
02:30 - 03:15 -> POM with Excel Integration
03:15 - 03:35 -> Breakout+Break
03:35 - 04:30 -> POM with Multi Lingual
04:30 - 05:00 -> Breakout+Break
05:00 - 06:00 -> POM with Cucumber
06:00 - 06:30 -> Breakout




POM with Excel Integration:
Create data folder and have the excelsheets inside Login 
Create a package called utils and have the ReadExcel java class inside
Create sendData() and annotate with DataProvider and call the readExcel() and return
Replace all the hardcoded data with input arguments in the required pages
In the testClasses, use dataProvider attribute to receive the data and pass input arguments in the test method.
Create setValues() in each testclass to mention the fileName and annotate with @BeforeTest



step1:
create propertie file under src/main/resources
step2:
Inside the PSM create FileInputStream and give path
create object for Properties
properties object.load(fis)
set Properties object as global and make it as 'static'
Step3:
Go to Pages and remove value ,give as propertiesObject.getProperty("keyName");
Step4:
Run from XMl or normal testcase 




Team Kindly fill the feedback form for this week
https://forms.office.com/r/xTyxhGdtcs 










Cucumber with POM:
 - Create 4 packages
     - base
        Create BaseClass with common methods
        BaseClass should extend AbstractTestNGCucumberTests
     - features
         Create feature files
     - pages
        Create classes for each page and each page should extend BaseClass
     - runner
        Create CucumberRunner class and , mention glue="pages"
        The runner class should extend BaseClass
For TestNG:
if driver - > static
   only sequential execution is possible

For both sequential and parallel execution:
   Create constrcutor in each of the pages  by removing static keyword


For Cucumber:
if driver - > static
   only sequential execution is possible 
If you want to have a hybrid framework combination of both TestNG + Cucumber

ThreadLocal
 It is a class in java for thread safety
Steps: 1. private static final ThreadLocal<RemoteWebDriver> cDriver = new ThreadLocal<RemoteWebDriver>();

 private:
   It can be accessed only within the class
 static final:
    static+final = constant
 ThreadLocal:
   It is a class that provides thread-local variable

2. Use setter and getter methods
     Sets the current thread's copy of this thread-local variable

      public void setDriver() {
	cDriver.set(new ChromeDriver());

}
 Returns the value in the current thread's copy of this thread-local variable   
public RemoteWebDriver getDriver() {
	return cDriver.get();
}



@BeforeMethod
public void precondition(){
  setDriver();
  then replace driver variable into getDriver()
  getDriver().manage.window.max();
}

For TestNG _POM : - with driver as static -> sequential execution is possible
 - To have sequential and parallel execution declare Parameterized Constructor in each pages

For Cucumber_POM: 
- Constructor should not be defined 
- With driver as static 
-> sequential execution is possible



POM with ThreadLocal:

Thread safety when working with variable ina multithreaded environment .
it allows you to store and retrieve values that are specific to the current thread,

-Java Class to create variable which can be used to read and write within a single thread. 
ThreadLocal implementation of Webdriver will support TestNG parallel execution and cucumber

DisAdvantage:

As the constructor call is not allowed in cucumber
To acheive parallel execution without constructor in cucumber

==============================

To support both cucumberand TestNG

---supportsequential execution of both TestNG and cucumber

--not able to use for parallel executionof TestNG because cucumber is not supporting driver to be passed inthe constructor.

Add ThreadLocalclass in Basecall method 
private static final ThreadLocal<RemoteWebDriver> tldriver=new ThreadLocal<RemoteWebDriver>();


ThreadLocal:
Java class which is used to access each thread independently
 private static final ThreadLocal chDriver = new ThreadLocal();
private: - This variable can be accessed only within the class static+final
 - constant -> cannot change the value

private static final ThreadLocal<RemoteWebDriver> tldriver=new ThreadLocal<RemoteWebDriver>();

public void setDriver() {
    //Sets the current thread's copy of this thread-local variable
	chDriver.set(new ChromeDriver());
}

public ChromeDriver getDriver() {
    //Returns the value in the current thread's copy of this thread-local variable
	return chDriver.get();
}

add setDriver() method to @BeforeMethod

Remove the constructor from all the pages

Change the 'driver' to 'getDriver()'  in all the actions in the pages
Encapsulation:
 - getter and setter methods
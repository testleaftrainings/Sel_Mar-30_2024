
Agenda:Week2.day1
02:30 to 03:15 : Selenium Introduction 
03:15 to 03:45 : Launch Browser
03:45 to 04:00 : Breakout
04:00 to 04:15 : Break
04:15 to 05:30 : Basic Locators 
05:30 to 06:00 : Breakout+Break
06:00 to 06:30 : DropDown(Select Class)















What Selenium?

|Selenium is a suite of tools and libraries designed for automated testing of web applications. 
|It provides a way for developers and testers to simulate user interactions with a web browser and automate 
various tasks, such as filling out forms, clicking buttons, navigating through pages, and verifying 
the behavior of web applications.


Why Selenium?

*The reason Selenium is so popular is because it's open-source, which means it's free to use and has a 
large community of users contributing to its development.
*This tool supports multiple programming languages like Java, Python, and C#, allowing a wide range 
of developers to use it.
*Additionally, Selenium can work with various browsers such as Chrome, Firefox, and Safari, making 
it versatile.

When to use Selenium?

*Selenium is ideal for testing web applications.
*If you have a website or a web application that needs to be tested across different browsers 
and operating systems, Selenium is a great choice.
*It's especially useful for regression testing, where you need to repeatedly test the same application
 following changes or updates.






pom.xml-Project Object Model




To Open DOM:

1. Right Click on webpage -> click on inspect
2. press f12 or fn+f12
3. more tools-> click on Developers tool or ctrl+shift+i



 Selenium interaction:
1)How Communication Happens?

Selenium automations are performed using the WebDriver, which is an interface that sends commands to a browser and retrieves results.
The process is streamlined through WebDriver's ability to communicate across various browsers using the same script in a chosen programming language.

2)Why Selenium Communicates with Webpage Through HTML Document-DOM?

Understanding the Document Object Model (DOM), which is the logical structure of HTML documents, allows Selenium to interact with various elements on a webpage.
By communicating through the DOM, Selenium can simulate user actions like clicking and typing in a way that mirrors real user behavior.

3)What is DOM?

The DOM is a representation of a browserâ€™s current web document.
It's a hierarchical tree of objects that enables scripts to dynamically access and update the content, structure, and style of documents.
Understanding the DOM is crucial for locating elements to interact with during testing.

4)Understanding HTML Structure and Tags

The HTML structure is composed of various tags like <html>, <a>, <button>, <div>, <iframe>, <img>, <input>, <option>, <select>, <span>, and <table>.
Each tag has a specific purpose, such as defining hyperlinks, sections in a document, or input fields. Knowing these tags helps in identifying elements for Selenium to interact with.

5)To Locate Element in DOM

Different locators such as id, name, className, linkText, partialLinkText, xpath are used to find elements in the DOM.
Each locator has a specific use case, for example, id is used when the element has a unique identifier, while xpath are used when elements are dynamic or duplicate name, class, or ID.
How to Use Locators?

6)Locators are used with the Syntax:
`driver.findElement(By.locator("value"))` 
For instance, By.id("login") would locate an element with the ID of 'login'.

7)When to/Not to Use Locators

Guidelines are provided on when to use specific locators.
For example, 
id should be used when it's available,
name if id does not exist,
linkText for links,
className when the class attribute is unique,
tagName for collections,
xpath if no other locator works.

Dropdown:
What is a Dropdown?

A dropdown in web development is a user interface element that allows users to select one option from a list of options.
In HTML, this is structured with a <select> tag as the parent element and <option> elements as children.
Selenium must be able to interact with these elements to test web applications thoroughly.
How to Handle Dropdown?

Selenium provides a Select class specifically for interacting with dropdown elements.
The Select class offers methods to select options within a dropdown easily.
When to Use?

The Select class should be used when an element in the DOM is identified with a <select> tag, indicating a dropdown menu.
<select> Structure in DOM

The <select> tag in the DOM represents the dropdown element,
and the nested <option> tags represent the individual choices available to the user.
How to Use Select Class?

To use the Select class, a Selenium script must first identify the <select> element in the DOM.
Then, an instance of the Select class is created by passing the located WebElement as an argument to its constructor.
This allows the script to manipulate the dropdown as needed.
Helper Methods

The Select class provides various methods to select options from a dropdown, such as:
selectByIndex(index): Selects an option by its index in the dropdown, starting with 0.
selectByVisibleText("text"): Selects an option by the text visible to the user in the dropdown.
selectByValue("value"): Selects an option by the value of its value attribute.